---
layout: post
title:  "What is Computer Science"
date:   2016-10-10 4:57:00 -0400
---
I'd love to be able to communicate about my research to my family and friends better.
Given how much time and effort I spend thinking about it, it would be nice if people close to me knew something about my research.
I've even had family and friends express interest in having me explain it.
However, talking about research effectively is hard.

Part of dealing with explaining research topics to bystanders is understanding them: They don't care *that* much.
However, even if someone really engages and wants to get somewhat in depth I struggle to explain things.
For example, I recently sat down with my parents and tried to explain the purpose of my research.
It wasn't easy.
How are you supposed to understand why I think static verification is important if you don't even know what a program looks like?
In some sense, I had to start from the beginning: What do you use programs for, how are they written, what's a programming language...

Most people are so far separated from the problems Computer Scientists face that they have very little basis to relate.
This ends up with my trying to find connections to topics the listener does understand.
For example, I tend to use lots and lots of analogies to explain things.
(My favorite of which comes from my sister-in-law, "Oh! I get it! David works on spell-check for programs!").

Still, it would be nice to be able to explain things more directly.
The most important requirement for explaining something to someone else is understanding it well yourself.
So that begs the question:

> What is Computer Science?

The best answer I've seen given comes from Hal Abelson in the first lecture of his and Gerald Sussman's "Structure and Intrepretation of Computer Programs" lectures.
You can find a video of his explanation in the video [here][explanation].
You can watch the rest of the lecture series [here][lectures].
I highly recommend checking it out.

For me, the most interesting part of this explanation is that it implies a connection between CS and the rest of the world.
This resonates with me.
To me, like Abelson, CS is only coincidentally useful for programming machines.
The bigger picture is that CS is the mathematics of process.
Any time you need to explain how to do something to anyone, CS likely has concepts which relate.
And there are lots of examples which clearly show how universal CS is.

One topic that brings this universality is the complexity hierarchy and especially P vs NP.
I've found that P vs NP to be one of the best concepts to attempt to explain to the layperson.
Once people grasp the concept they're usually fascinated:
CS has something to say about why some of the problems you face day to day are hard.

Ultimately, coming up with an answer for what CS is about goes beyond explaining it to others.
Having a firm, personal definition of a field is important for any professional.
Such a definition gives a framework for thinking about the field.

[explanation]: https://www.youtube.com/watch?v=zQLUPjefuWA
[lectures]: https://www.youtube.com/watch?v=2Op3QLzMgSY&list=PL8FE88AA54363BC46
